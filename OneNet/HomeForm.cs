using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraNavBar;
using MySql.Data.MySqlClient;
using NLog;
using System.Collections;
using OneNet.common;
using System.Threading;

namespace OneNet
{
    public partial class HomeForm : DevExpress.XtraEditors.XtraForm
    {
        Logger _logger = LogManager.GetCurrentClassLogger();
        public HomeForm()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSource2.Fill();
        }

        private void item_Changed(object sender, EventArgs e)
        {
            NavBarGroup group = (NavBarGroup)sender;
            this.Text = group.Caption;
            refresh_MonitorData(group);
            refresh_SensorData();
            refresh_SnData(group);
            refresh_UrlData(group);

        }

        private void refresh_MonitorData(NavBarGroup group)
        {
            string sql = "select * from monitor where projectid = ?";
            MySqlParameter mp = new MySqlParameter(@"projectid", MySqlDbType.Int32) { Value = group.Tag };
            try
            {
                DataTable dt = common.MySqlHelper.GetDataSet(sql, mp).Tables[0];
                gridControl1.DataSource = null;
                gridControl1.DataSource = dt;

                comboBoxEdit1.Properties.Items.Clear();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string id = dt.Rows[i].ItemArray[0].ToString();
                    string name = dt.Rows[i].ItemArray[1].ToString();
                    ComboxData comboxData = new ComboxData() { Text = name, Value = id };
                    comboBoxEdit1.Properties.Items.Add(comboxData);
                }
                if (comboBoxEdit1.Properties.Items.Count > 0)
                    comboBoxEdit1.SelectedItem = comboBoxEdit1.Properties.Items[0];
            }
            catch (Exception ex)
            {
                _logger.Trace(ex.Message + "----refresh_MonitorData方法");
            }
        }

        private void refresh_SensorData()
        {
            if (comboBoxEdit1.SelectedItem == null)
                return;
            ComboxData comboxData = comboBoxEdit1.SelectedItem as ComboxData;
            int monitorid = Convert.ToInt32(comboxData.Value);

            string sql = "select s.id,s.name,st.name as sensortypename,st.code,st.unit,s.monitorid,s.sensortypeid from sensor s LEFT JOIN sensor_type st on s.sensortypeid = st.id WHERE monitorid = ?";
            MySqlParameter mp = new MySqlParameter(@"monitorid", MySqlDbType.Int32) { Value = monitorid };
            try
            {
                DataSet ds = common.MySqlHelper.GetDataSet(sql, mp);
                gridControl2.DataSource = null;
                gridControl2.DataSource = ds.Tables[0];
            }
            catch (Exception ex)
            {
                _logger.Trace(ex.Message + "----refresh_SensorData方法");
            }
        }

        private void refresh_SnData(NavBarGroup group)
        {
            string sql = "select bi.id,bi.sn,m.name as monitorname,s.name sensorname,m.id as monitorid,s.id as sensorid,bi.type,bi.L from bindinfo bi LEFT JOIN sensor s on bi.sensorid = s.id LEFT JOIN monitor m on s.monitorid = m.id where m.projectid = ?";
            MySqlParameter mp = new MySqlParameter(@"projectid", MySqlDbType.Int32) { Value = group.Tag };
            try
            {
                DataTable dt = common.MySqlHelper.GetDataSet(sql, mp).Tables[0];
                gridControl4.DataSource = null;
                gridControl4.DataSource = dt;
            }
            catch (Exception ex)
            {
                _logger.Trace(ex.Message + "----refresh_SnData方法");
            }
        }

        private void refresh_UrlData(NavBarGroup group)
        {
            string sql = "select * from url where projectid = ?";
            MySqlParameter mp = new MySqlParameter(@"projectid", MySqlDbType.Int32) { Value = group.Tag };
            try
            {
                DataTable dt = common.MySqlHelper.GetDataSet(sql, mp).Tables[0];
                gridControl3.DataSource = null;
                gridControl3.DataSource = dt;
            }
            catch (Exception ex)
            {
                _logger.Trace(ex.Message + "----refresh_UrlData方法");
            }
        }

        private void HomeForm_Load(object sender, EventArgs e)
        {
            // TODO: 这行代码将数据加载到表“onenetDataSet.url”中。您可以根据需要移动或删除它。
            this.urlTableAdapter.Fill(this.onenetDataSet.url);
            // TODO: 这行代码将数据加载到表“onenetDataSet.monitor”中。您可以根据需要移动或删除它。
            this.monitorTableAdapter.Fill(this.onenetDataSet.monitor);
            //加载侧边栏数据
            try
            {
                ThreadPool.QueueUserWorkItem(o => { Download.GetInstance().DownloadData(); });

                string sql = "select * from project";
                DataTable dt = common.MySqlHelper.GetDataSet(sql, null).Tables[0];
                navBarControl1.Groups.Clear();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    int id = Convert.ToInt32(dt.Rows[i].ItemArray[0]);
                    NavBarGroup group = new NavBarGroup();
                    group.Caption = dt.Rows[i].ItemArray[1].ToString();
                    group.Name = "navBarGroup" + id;
                    group.Tag = id;
                    group.ItemChanged += new EventHandler(item_Changed);
                    navBarControl1.Groups.Add(group);
                }
                navBarControl1.ActiveGroup = navBarControl1.Groups[0];
            }
            catch (Exception ex)
            {
                _logger.Trace(ex.Message + "----itemFaviate_ItemClick方法");
            }
        }

        private void monitorAdd_Click(object sender, EventArgs e)
        {
            MonitorAddForm mAdd = new MonitorAddForm();
            mAdd.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            mAdd.ProjectName = navBarControl1.ActiveGroup.Caption;
            if (mAdd.ShowDialog() == DialogResult.OK)
            {
                mAdd.MdiParent = this;
                mAdd.ShowDialog();
            }
            refresh_MonitorData(navBarControl1.ActiveGroup);
        }

        private void monitorEdit_Click(object sender, EventArgs e)
        {
            MonitorEditForm mEdit = new MonitorEditForm();
            mEdit.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            mEdit.ProjectName = navBarControl1.ActiveGroup.Caption;
            ArrayList rows = new ArrayList();
            Int32[] selectedRowHandles = gridView1.GetSelectedRows();
            for (int i = 0; i < selectedRowHandles.Length; i++)
            {
                int selectedRowHandle = selectedRowHandles[i];
                if (selectedRowHandle >= 0)
                    rows.Add(gridView1.GetDataRow(selectedRowHandle));
            }
            if (rows.Count > 0)
            {
                DataRow row = rows[0] as DataRow;
                mEdit.MonitorName = row["name"].ToString();
                mEdit.Monitorid = Convert.ToInt32(row["id"]);
            }
            if (mEdit.ShowDialog() == DialogResult.OK)
            {
                mEdit.MdiParent = this;
                mEdit.Show();
            }
            refresh_MonitorData(navBarControl1.ActiveGroup);
        }

        private void monitorDel_Click(object sender, EventArgs e)
        {
            if (XtraMessageBox.Show("确定删除所选数据？", "删除提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                ArrayList rows = new ArrayList();
                Int32[] selectedRowHandles = gridView1.GetSelectedRows();
                for (int i = 0; i < selectedRowHandles.Length; i++)
                {
                    int selectedRowHandle = selectedRowHandles[i];
                    if (selectedRowHandle >= 0)
                        rows.Add(gridView1.GetDataRow(selectedRowHandle));
                }
                if (rows.Count > 0)
                {
                    DataRow row = rows[0] as DataRow;
                    string sql = "delete from monitor where id = ?";
                    MySqlParameter param_id = new MySqlParameter(@"id", MySqlDbType.Int32) { Value = Convert.ToInt32(row["id"]) };
                    int cols = common.MySqlHelper.ExecuteNonQuery(sql, param_id);
                    if (cols == 1)
                        alertControl1.Show(this, "提示：", "删除成功");
                    else
                        alertControl1.Show(this, "提示：", "删除失败");
                }
                refresh_MonitorData(navBarControl1.ActiveGroup);
            }
        }

        private void sensorAddLink_Click(object sender, EventArgs e)
        {
            SensorAddForm sAdd = new SensorAddForm();
            ComboxData comboxData = comboBoxEdit1.SelectedItem as ComboxData;
            if (comboxData == null)
            {
                XtraMessageBox.Show("请选择监测线！");
                return;
            }
            sAdd.Monitorid = Convert.ToInt32(comboxData.Value);
            sAdd.MonitorName = comboxData.Text;
            if (sAdd.ShowDialog() == DialogResult.OK)
            {
                sAdd.MdiParent = this;
                sAdd.ShowDialog();
            }
            refresh_SensorData();
        }

        private void sensorEditLink_Click(object sender, EventArgs e)
        {
            SensorEditForm sEdit = new SensorEditForm();
            ComboxData comboxData = comboBoxEdit1.SelectedItem as ComboxData;
            if (comboxData == null)
            {
                XtraMessageBox.Show("请选择监测线！");
                return;
            }
            sEdit.Monitorid = Convert.ToInt32(comboxData.Value);
            sEdit.MonitorName = comboxData.Text;
            ArrayList rows = new ArrayList();
            Int32[] selectedRowHandles = gridView2.GetSelectedRows();
            for (int i = 0; i < selectedRowHandles.Length; i++)
            {
                int selectedRowHandle = selectedRowHandles[i];
                if (selectedRowHandle >= 0)
                    rows.Add(gridView2.GetDataRow(selectedRowHandle));
            }
            if (rows.Count > 0)
            {
                DataRow row = rows[0] as DataRow;
                sEdit.SensorName = row["name"].ToString();
                sEdit.Sensorid = Convert.ToInt32(row["id"]);
            }
            if (sEdit.ShowDialog() == DialogResult.OK)
            {
                sEdit.MdiParent = this;
                sEdit.Show();
            }
            refresh_SensorData();
        }

        private void sensorDelLink_Click(object sender, EventArgs e)
        {
            if (XtraMessageBox.Show("确定删除所选数据？", "删除提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                ArrayList rows = new ArrayList();
                Int32[] selectedRowHandles = gridView2.GetSelectedRows();
                for (int i = 0; i < selectedRowHandles.Length; i++)
                {
                    int selectedRowHandle = selectedRowHandles[i];
                    if (selectedRowHandle >= 0)
                        rows.Add(gridView2.GetDataRow(selectedRowHandle));
                }
                if (rows.Count > 0)
                {
                    DataRow row = rows[0] as DataRow;
                    string sql = "delete from sensor where id = ?";
                    MySqlParameter param_id = new MySqlParameter(@"id", MySqlDbType.Int32) { Value = Convert.ToInt32(row["id"]) };
                    int cols = common.MySqlHelper.ExecuteNonQuery(sql, param_id);
                    if (cols == 1)
                        alertControl1.Show(this, "提示：", "删除成功");
                    else
                        alertControl1.Show(this, "提示：", "删除失败");
                }
                refresh_SensorData();
            }
        }

        private void ipAddLink_Click(object sender, EventArgs e)
        {
            UrlAddForm uAdd = new UrlAddForm();
            uAdd.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            uAdd.ProjectName = navBarControl1.ActiveGroup.Caption;
            if (uAdd.ShowDialog() == DialogResult.OK)
            {
                uAdd.MdiParent = this;
                uAdd.ShowDialog();
            }
            refresh_UrlData(navBarControl1.ActiveGroup);
        }

        private void ipEditLink_Click(object sender, EventArgs e)
        {
            UrlEditForm uEdit = new UrlEditForm();
            uEdit.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            uEdit.ProjectName = navBarControl1.ActiveGroup.Caption;
            ArrayList rows = new ArrayList();
            Int32[] selectedRowHandles = gridView3.GetSelectedRows();
            for (int i = 0; i < selectedRowHandles.Length; i++)
            {
                int selectedRowHandle = selectedRowHandles[i];
                if (selectedRowHandle >= 0)
                    rows.Add(gridView3.GetDataRow(selectedRowHandle));
            }
            if (rows.Count > 0)
            {
                DataRow row = rows[0] as DataRow;
                uEdit.Ip = row["ip"].ToString();
                uEdit.Urlid = Convert.ToInt32(row["id"]);
            }
            if (uEdit.ShowDialog() == DialogResult.OK)
            {
                uEdit.MdiParent = this;
                uEdit.Show();
            }
            refresh_UrlData(navBarControl1.ActiveGroup);
        }

        private void ipDelLink_Click(object sender, EventArgs e)
        {
            if (XtraMessageBox.Show("确定删除所选数据？", "删除提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                ArrayList rows = new ArrayList();
                Int32[] selectedRowHandles = gridView3.GetSelectedRows();
                for (int i = 0; i < selectedRowHandles.Length; i++)
                {
                    int selectedRowHandle = selectedRowHandles[i];
                    if (selectedRowHandle >= 0)
                        rows.Add(gridView3.GetDataRow(selectedRowHandle));
                }
                if (rows.Count > 0)
                {
                    DataRow row = rows[0] as DataRow;
                    string sql = "delete from url where id = ?";
                    MySqlParameter param_id = new MySqlParameter(@"id", MySqlDbType.Int32) { Value = Convert.ToInt32(row["id"]) };
                    int cols = common.MySqlHelper.ExecuteNonQuery(sql, param_id);
                    if (cols == 1)
                        alertControl1.Show(this, "提示：", "删除成功");
                    else
                        alertControl1.Show(this, "提示：", "删除失败");
                }
                refresh_UrlData(navBarControl1.ActiveGroup);
            }
        }

        private void snAddLink_Click(object sender, EventArgs e)
        {
            SNAddForm snAdd = new SNAddForm();
            if(navBarControl1.ActiveGroup.Tag == null)
            {
                XtraMessageBox.Show("请选择左侧的项目");
                return;
            }
            snAdd.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            var index = gridView4.GetFocusedDataSourceRowIndex();//获取数据行的索引值，从0开始
            var sn = gridView4.GetRowCellValue(index, "sn");//获取选中行的那个单元格的值
            if (sn != null)
                snAdd.Sn = sn.ToString();

            if (snAdd.ShowDialog() == DialogResult.OK)
            {
                snAdd.MdiParent = this;
                snAdd.ShowDialog();
            }
            refresh_SnData(navBarControl1.ActiveGroup);
        }

        private void snEditLink_Click(object sender, EventArgs e)
        {
            SNEditForm snEdit = new SNEditForm();
            snEdit.Projectid = Convert.ToInt32(navBarControl1.ActiveGroup.Tag);
            var index = gridView4.GetFocusedDataSourceRowIndex();//获取数据行的索引值，从0开始
            var sn = gridView4.GetRowCellValue(index, "sn");//获取选中行的那个单元格的值
            var id = gridView4.GetRowCellValue(index, "id");
            snEdit.Sn = sn.ToString();
            snEdit.Bindinfoid = Convert.ToInt32(id);
            if (snEdit.ShowDialog() == DialogResult.OK)
            {
                snEdit.MdiParent = this;
                snEdit.ShowDialog();
            }
            refresh_SnData(navBarControl1.ActiveGroup);
        }

        private void snDelLink_Click(object sender, EventArgs e)
        {
            if (XtraMessageBox.Show("确定删除所选数据？", "删除提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                var index = gridView4.GetFocusedDataSourceRowIndex();//获取数据行的索引值，从0开始
                var id = gridView4.GetRowCellValue(index, "id");
                string sql = "delete from bindinfo where id = ?";
                MySqlParameter param_id = new MySqlParameter(@"id", MySqlDbType.Int32) { Value = Convert.ToInt32(id) };
                int cols = common.MySqlHelper.ExecuteNonQuery(sql, param_id);
                if (cols == 1)
                    alertControl1.Show(this, "提示：", "删除成功");
                else
                    alertControl1.Show(this, "提示：", "删除失败");
                refresh_SnData(navBarControl1.ActiveGroup);
            }
        }

        /// <summary>
        /// 监测线
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            monitorPanel.Visible = true;
            sensorPanel.Visible = false;
            ipPanel.Visible = false;
            snPanel.Visible = false;
        }

        /// <summary>
        /// 监测点
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            monitorPanel.Visible = false;
            sensorPanel.Visible = true;
            ipPanel.Visible = false;
            snPanel.Visible = false;
            if (comboBoxEdit1.Properties.Items.Count > 0)
                comboBoxEdit1.SelectedItem = comboBoxEdit1.Properties.Items[0];
        }

        /// <summary>
        /// IP地址
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButton3_Click(object sender, EventArgs e)
        {
            monitorPanel.Visible = false;
            sensorPanel.Visible = false;
            ipPanel.Visible = true;
            snPanel.Visible = false;
        }

        /// <summary>
        /// SN绑定
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButton4_Click(object sender, EventArgs e)
        {
            monitorPanel.Visible = false;
            sensorPanel.Visible = false;
            ipPanel.Visible = false;
            snPanel.Visible = true;
        }

        /// <summary>
        /// 监测点下拉框事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void comboBoxEdit1_SelectedValueChanged(object sender, EventArgs e)
        {
            refresh_SensorData();
        }

        private void gridView4_CustomColumnDisplayText(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDisplayTextEventArgs e)
        {
            if (e.Column.FieldName == "type")
            {
                switch (e.Value.ToString().Trim())
                {
                    case "0":
                        e.DisplayText = "角度";
                        break;
                    case "1":
                        e.DisplayText = "加速度";
                        break;
                    case "2":
                        e.DisplayText = "位移";
                        break;
                    default:
                        e.DisplayText = "";
                        break;
                }
            }
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            MyEventArg myEvent = new MyEventArg();
            if (monitorPanel.Visible)
            {
                monitorAdd_Click(this, myEvent);
                return;
            }
            if (sensorPanel.Visible)
            {
                sensorAddLink_Click(this, myEvent);
                return;
            }
            if (ipPanel.Visible)
            {
                ipAddLink_Click(this, myEvent);
                return;
            }
            if (snPanel.Visible)
            {
                snAddLink_Click(this, myEvent);
                return;
            }
        }
    }

    public class MyEventArg : EventArgs
    {
        //传递主窗体的数据信息
        public string Text { get; set; }
    }
}